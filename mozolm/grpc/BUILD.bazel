# Copyright 2025 MozoLM Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# MozoLM gRPC-specific packages.

load("@com_github_grpc_grpc//bazel:cc_grpc_library.bzl", "cc_grpc_library")
load("@com_github_grpc_grpc_java//:java_grpc_library.bzl", "java_grpc_library")

load("//bazel:js_build_defs.bzl", "jspb_proto_library", "js_grpc_web_library")

package(
    default_visibility = ["//mozolm:__subpackages__"],
)

licenses(["notice"])

# ------------------------------------------------------------------------------
# Async server code (completion-queue based).
# ------------------------------------------------------------------------------

proto_library(
    name = "server_config_proto",
    srcs = ["server_config.proto"],
    deps = [
        "//mozolm/models:lm_scores_proto",
        "//mozolm/models:model_config_proto",
    ],
)

cc_proto_library(
    name = "server_config_cc_proto",
    deps = [":server_config_proto"],
)

cc_library(
    name = "server_async_impl",
    srcs = ["server_async_impl.cc"],
    hdrs = ["server_async_impl.h"],
    linkstatic = True,
    deps = [
        ":service_cc_grpc_proto",
        ":service_cc_proto",
        "//mozolm/models:language_model_hub",
        "//mozolm/stubs:integral_types",
        "@com_github_grpc_grpc//:grpc++",
        "@com_google_absl//absl/functional:bind_front",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@com_google_nisaba//nisaba/port:thread_pool",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "server_async_main-lib",
    srcs = ["server_async_main.cc"],
    linkstatic = True,
    deps = [
        ":server_config_cc_proto",
        ":server_helper",
        "//mozolm/stubs:integral_types",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_nisaba//nisaba/port:file_util",
        "@com_google_nisaba//nisaba/port:status_macros",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "server_async",
    linkstatic = True,
    deps = [":server_async_main-lib"],
)

# Target for inclusion in container images (used by Bazel).
cc_binary(
    name = "server_async_static",
    features = ["fully_static_link"],
    linkstatic = True,
    visibility = ["//visibility:public"],
    deps = [
        ":server_async_main-lib",
    ],
)

cc_test(
    name = "server_async_impl_test",
    size = "small",
    srcs = ["server_async_impl_test.cc"],
    linkstatic = True,
    deps = [
        ":server_async_impl",
        ":service_cc_grpc_proto",
        "//mozolm/models:language_model_hub",
        "//mozolm/models:model_config_cc_proto",
        "//mozolm/models:model_factory",
        "//mozolm/models:model_storage_cc_proto",
        "@com_github_grpc_grpc//:grpc++",
        "@com_github_protobuf_matchers//protobuf-matchers",
        "@com_google_absl//absl/status",
        "@com_google_googletest//:gtest_main",
        "@com_google_nisaba//nisaba/port:status-matchers",
        "@com_google_nisaba//nisaba/port:utf8_util",
    ],
)

cc_library(
    name = "server_helper",
    srcs = ["server_helper.cc"],
    hdrs = ["server_helper.h"],
    linkstatic = True,
    deps = [
        ":server_async_impl",
        ":server_config_cc_proto",
        "//mozolm/models:model_factory",
        "//mozolm/stubs:integral_types",
        "@com_github_grpc_grpc//:grpc++",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/synchronization",
        "@com_google_nisaba//nisaba/port:status_macros",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_test(
    name = "server_helper_test",
    srcs = ["server_helper_test.cc"],
    data = ["//mozolm/grpc/testdata/cred/x509:x509_data"],
    linkstatic = True,
    deps = [
        ":auth_test_utils",
        ":server_helper",
        "//mozolm/models:model_config_cc_proto",
        "//mozolm/models:model_storage_cc_proto",
        "//mozolm/stubs:integral_types",
        "@com_github_protobuf_matchers//protobuf-matchers",
        "@com_google_absl//absl/time",
        "@com_google_googletest//:gtest_main",
        "@com_google_nisaba//nisaba/port:file_util",
        "@com_google_nisaba//nisaba/port:status-matchers",
        "@com_google_protobuf//:protobuf",
    ],
)

# ------------------------------------------------------------------------------
# Async client code (completion-queue based).
# ------------------------------------------------------------------------------

proto_library(
    name = "client_config_proto",
    srcs = ["client_config.proto"],
    deps = [":server_config_proto"],
)

cc_proto_library(
    name = "client_config_cc_proto",
    deps = [":client_config_proto"],
)

cc_library(
    name = "client_async_impl",
    srcs = ["client_async_impl.cc"],
    hdrs = ["client_async_impl.h"],
    linkstatic = True,
    deps = [
        ":service_cc_grpc_proto",
        "//mozolm/models:language_model",
        "//mozolm/stubs:integral_types",
        "@com_github_grpc_grpc//:grpc++",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_nisaba//nisaba/port:status_macros",
        "@com_google_nisaba//nisaba/port:utf8_util",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_test(
    name = "client_async_impl_test",
    srcs = ["client_async_impl_test.cc"],
    linkstatic = True,
    deps = [
        ":client_async_impl",
        ":service_cc_grpc_proto",
        "//mozolm/stubs:integral_types",
        "@com_github_protobuf_matchers//protobuf-matchers",
        "@com_google_absl//absl/memory",
        "@com_google_googletest//:gtest_main",
        "@com_google_nisaba//nisaba/port:status-matchers",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "client_async_main-lib",
    srcs = ["client_async_main.cc"],
    linkstatic = True,
    deps = [
        ":client_config_cc_proto",
        ":client_helper",
        ":server_config_cc_proto",
        "//mozolm/stubs:integral_types",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_nisaba//nisaba/port:file_util",
        "@com_google_nisaba//nisaba/port:status_macros",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_binary(
    name = "client_async",
    linkstatic = True,
    deps = [":client_async_main-lib"],
)

# Target for inclusion in container images (used by Bazel).
cc_binary(
    name = "client_async_static",
    features = ["fully_static_link"],
    linkstatic = True,
    visibility = ["//visibility:public"],
    deps = [
        ":client_async_main-lib",
    ],
)

cc_library(
    name = "client_helper",
    srcs = ["client_helper.cc"],
    hdrs = ["client_helper.h"],
    linkstatic = True,
    deps = [
        ":client_async_impl",
        ":client_config_cc_proto",
        ":server_config_cc_proto",
        ":server_helper",
        "//mozolm/stubs:integral_types",
        "@com_github_grpc_grpc//:grpc++",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/random",
        "@com_google_absl//absl/random:bit_gen_ref",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_absl//absl/synchronization",
        "@com_google_nisaba//nisaba/port:status_macros",
        "@com_google_nisaba//nisaba/port:utf8_util",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_test(
    name = "client_helper_test",
    srcs = ["client_helper_test.cc"],
    data = [
        "//mozolm/models/testdata:ngram_fst_data",
        "//mozolm/models/testdata:ppm_as_fst_data",
    ],
    linkstatic = True,
    deps = [
        ":client_helper",
        ":server_config_cc_proto",
        ":server_helper",
        "//mozolm/models:model_config_cc_proto",
        "//mozolm/models:ppm_as_fst_options_cc_proto",
        "//mozolm/stubs:integral_types",
        "@com_github_protobuf_matchers//protobuf-matchers",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
        "@com_google_nisaba//nisaba/port:file_util",
        "@com_google_nisaba//nisaba/port:status-matchers",
        "@com_google_nisaba//nisaba/port:test_utils",
        "@com_google_protobuf//:protobuf",
    ],
)

# ------------------------------------------------------------------------------
# Service definitions.
# ------------------------------------------------------------------------------

proto_library(
    name = "service_proto",
    srcs = ["service.proto"],
    deps = ["//mozolm/models:lm_scores_proto"],
)

cc_proto_library(
    name = "service_cc_proto",
    deps = [":service_proto"],
)

cc_grpc_library(
    name = "service_cc_grpc_proto",
    srcs = [":service_proto"],
    grpc_only = True,
    generate_mocks = True,
    deps = [":service_cc_proto"],
)

# TODO: Consider adding support for `lite` protobufs.
java_proto_library(
    name = "service_java_proto",
    has_services = True,  # b/241918504
    deps = [":service_proto"],
)

java_grpc_library(
    name = "service_java_grpc_proto",
    srcs = [":service_proto"],
    deps = [":service_java_proto"],
)

jspb_proto_library(
    name = "service_jspb_proto",
    deps = [":service_proto"],
)

js_grpc_web_library(
    name = "service_js_grpc_proto",
    src = "service.proto",
    deps = [":service_jspb_proto"],
)

# ------------------------------------------------------------------------------
# Other.
# ------------------------------------------------------------------------------

cc_library(
    name = "auth_test_utils",
    testonly = 1,
    srcs = ["auth_test_utils.cc"],
    hdrs = ["auth_test_utils.h"],
    linkstatic = True,
    deps = [
        "@com_github_protobuf_matchers//protobuf-matchers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_googletest//:gtest",
        "@com_google_nisaba//nisaba/port:file_util",
        "@com_google_nisaba//nisaba/port:status-matchers",
        "@com_google_nisaba//nisaba/port:test_utils",
    ],
)

cc_test(
    name = "auth_end2end_test",
    srcs = ["auth_end2end_test.cc"],
    data = [
        "//mozolm/grpc/testdata/cred/x509:x509_data",
        "//mozolm/models/testdata:ngram_fst_data",
    ],
    linkstatic = True,
    deps = [
        ":auth_test_utils",
        ":client_helper",
        ":server_helper",
        "@com_github_protobuf_matchers//protobuf-matchers",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
        "@com_google_nisaba//nisaba/port:file_util",
        "@com_google_nisaba//nisaba/port:status-matchers",
        "@com_google_nisaba//nisaba/port:status_macros",
        "@com_google_nisaba//nisaba/port:test_utils",
    ],
)
