// Copyright 2024 MozoLM Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package mozolm.grpc;

import "mozolm/grpc/server_config.proto";

option java_package = "com.google.mozolm.grpc";
option java_outer_classname = "ClientConfigProto";
option java_multiple_files = true;

// Client authentication details: This message is supposed to be used in
// conjunction with the corresponding server authentication configuration
// defined in `ServerAuthConfig` message.
//
// Next available ID: 2
message ClientAuthConfig {
  // Next available ID: 4
  message TlsConfig {
    // Target name override for TLS host name checking. This should
    // *not* be used in production. Normally, the name of the target
    // should match the Common Name (aka `CN`) that represents the
    // server name protected by the TLS certificate. The certificate
    // is valid only if the request hostname matches the certificate
    // common name.
    //
    // The Subject Alternative Name (SAN) is an extension to the X.509
    // specification that allows users to specify additional host
    // names for a single TLS certificate. This is replacing Common
    // Name (CN) mechanism.
    //
    // Example: See `subjectAltName` key in `opentls.conf` under the
    // `testdata/x509` directory.
    string target_name_override = 1;

    // Public client certificate (PEM encoded).
    string client_cert = 2;

    // Private client key for TLS (PEM encoded).
    string client_key = 3;
  }

  // TLS/TLS configuration for a secure gRPC channel. If not given, insecure
  // connection is used.
  TlsConfig tls = 1;
}

// Next available ID: 9
message ClientConfig {
  // Server configuration. Several values in server configuration, such as
  // endpoint configuration and authentication details, are needed to
  // in order to successfully establish client connections.
  ServerConfig server = 1;

  // Client authentication details.
  ClientAuthConfig auth = 2;

  // Type of request client will be making to the server.
  ClientRequestType request_type = 3;
  enum ClientRequestType {
    // Client request type not set.
    NOT_SET = 0;

    // Returns k-best items following context_string.
    K_BEST_ITEMS = 1;

    // Randomly generates string.
    RANDGEN = 2;

    // Calculates bits-per-char on given test_corpus.
    BITS_PER_CHAR_CALCULATION = 3;
  }

  // Number of items to return in k_best extraction.
  int32 k_best = 5;

  // Context string prior to k_best extraction or random generation.
  string context_string = 6;

  // Test corpus for calculating bits-per-character.
  string test_corpus = 7;

  // Timeout when waiting for response from server specified in seconds.
  double timeout_sec = 8;
}
