// Copyright 2025 MozoLM Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Server-side configuration.

syntax = "proto3";

package mozolm.grpc;

import "mozolm/models/model_config.proto";

option java_package = "com.google.mozolm.grpc";
option java_outer_classname = "ServerConfigProto";
option java_multiple_files = true;

enum CredentialType {
  // Not recommended for actual deployments when security and privacy
  // are required.
  CREDENTIAL_INSECURE = 0;
  // https://en.wikipedia.org/wiki/Transport_Layer_Security
  CREDENTIAL_TLS = 1;
}

// Next available ID: 3
message ServerAuthConfig {
  // Type of authorization credentials used in client/server handshake.
  CredentialType credential_type = 1;

  // Configuration for TLS/SSL server credentials.
  //
  // This and the corresponding client-side configuration in
  // `client_config.proto` introduces the following PEM-encoded credentials:
  //
  //   - server_ca_cert: The certificate authority who has signed the
  //     `server_cert`.
  //   - server_cert: The server certificate chain, verified by the client via
  //     `server_ca_cert`.
  //   - server_key: The private key of the server.
  //   - client_ca_cert: The certificate authority who has signed the
  //     `client_cert`.
  //   - client_cert: The client certificate chain, verified by the server via
  //     `client_ca_cert`.
  //   - client_key: The private key of the client.
  //
  // The certificate authorities `server_ca_cert` and `client_ca_cert` may or
  // may not be the same. For mutual authentication all of the above are
  // required.
  //
  // Next available ID: 5
  message TlsConfig {
    // Private server key for TLS (PEM encoded).
    string server_key = 1;

    // Public server certificate (PEM encoded).
    string server_cert = 2;

    // Custom certificate authority (PEM encoded).
    string custom_ca_cert = 3;

    // Whether a valid client certificate is required.
    bool client_verify = 4;
  }

  // TLS/TLS configuration for a secure gRPC channel. If not given, insecure
  // connection is used.
  TlsConfig tls = 2;
}

// Next available ID: 6
message ServerConfig {
  // Model hub configuration.
  ModelHubConfig model_hub_config = 1;

  // The address to try to bind to the server in URI form. If
  // the scheme name is omitted, "dns:///" is assumed. To bind to any address,
  // please use IPv6 any, i.e., [::]:<port>, which also accepts IPv4
  // connections.  Valid values include `dns:///localhost:1234`,
  // `192.168.1.1:31416`, `dns:///[::1]:27182`, etc.
  //
  // To use UNIX domain, rather than TCP, sockets (aka UDS) use the
  // "unix:///" scheme. Example: `unix:///tmp/example.sock`. Ideally the socket
  // should be removed upon shutting down.
  string address_uri = 2;

  // Configuration for authentication mechanisms.
  ServerAuthConfig auth = 3;

  // Whether the server will wait for client requests. Always enabled by
  // default, only disabled for the testing.
  bool wait_for_clients = 4;

  // Number of threads for handling requests asynchronously.
  int32 async_pool_size = 5;
}
